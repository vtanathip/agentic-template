services:
  # FastAPI + LangGraph application
  agentic-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.agentic
    container_name: agentic-template-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - UVICORN_HOST=0.0.0.0
      - UVICORN_PORT=8000
    volumes:
      - ../src:/app/src:ro # Mount source for development (read-only)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - agentic-network

  # Multi-Agent Trading System API
  multiagent-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.multiagent
    container_name: agentic-multiagent-api
    ports:
      - "8001:8001"
    environment:
      - PYTHONPATH=/app
      - UVICORN_HOST=0.0.0.0
      - UVICORN_PORT=8001
    volumes:
      - ../src:/app/src:ro # Mount source for development (read-only)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - agentic-network

  # OpenWebUI for main agentic chat interface
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: agentic-openwebui
    ports:
      - "3000:8080"
    environment:
      - OPENAI_API_BASE_URL=http://agentic-api:8000
      - OPENAI_API_KEY=dummy-key # Required but can be dummy for local APIs
      - WEBUI_AUTH=False # Disable authentication for development
      - WEBUI_NAME=Agentic Template Chat
      - WEBUI_URL=http://localhost:3000
    volumes:
      - openwebui-data:/app/backend/data
    depends_on:
      agentic-api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - agentic-network

networks:
  agentic-network:
    driver: bridge

volumes:
  openwebui-data:
